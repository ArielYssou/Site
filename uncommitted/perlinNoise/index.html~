<!DOCTYPE html>
<html lang='en'>
	<head>

		<meta charset="utf-8">
		<meta name="viewport" content="width=device-width, intial-scale=1">

		<!-- Name on tab -->
		<title>TITLE_TAG</title>

		<!-- Google Fonts -->
		<link href="https://fonts.googleapis.com/css?family=Cormorant+Garamond:400,700&display=swap" rel="stylesheet"> 

		<!-- Custom CSS -->
		<link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" crossorigin="anonymous">
		<link rel="stylesheet" href="../../css/prism.css"> <!--TARGET-->
		<link rel="stylesheet" href="../../css/style.css"> <!--TARGET-->

		<script src="https://polyfill.io/v3/polyfill.min.js?features=es6"></script>
		<script src="https://cdn.jsdelivr.net/npm/p5@0.10.2/lib/p5.js"></script>

		<!-- Custom p5js animations -->
		<script src="sketch.js"></script>

		<!-- MathJax for LaTeX -->
		<script id="MathJax-script" async
						src="https://cdn.jsdelivr.net/npm/mathjax@3/es5/tex-mml-chtml.js">
		</script>
	</head>

	<body style="background-color:#42403b">
		<!-- Navigation bar -->
		<nav class="navbar navbar-expand-lg navbar-dark bg-dark fixed-top">
			<a class="navbar-brand" href="../.." style="font-weight:bold;">Ariel Yssou</a> <!--TARGET-->
			<button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarSupportedContent" aria-controls="navbarSupportedContent" aria-expanded="false" aria-label="Toggle navigation">
				<span class="navbar-toggler-icon"></span>
			</button>
			<div class="collapse navbar-collapse" id="navbarSupportedContent">
				<ul class="navbar-nav mr-auto">
					<li class="nav-item">
						<a class="nav-link" href="../.." style="font-weight:bold;">Home </a><!--TARGET-->
 
					</li>
					<li class="nav-item active">
						<a class="nav-link" href="../../blog" style="font-weight:bold;">Blog <span class="sr-only">(current)</span></a><!--TARGET-->
					</li>
					<li class="nav-item">
						<a class="nav-link" href="../../about" style="font-weight:bold;">About</a><!--TARGET-->
					</li>
				</ul>
			</div>
			<div class="collapse navbar-collapse" id="navbarSupportedContent">
				<ul class="navbar-nav ml-auto">
					<li class="nav-item">
						<a class="nav-link text-nowrap" href="https://github.com/ArielYssou" target="_blank"><i class="fab fa-github fa-lg"></i></a>
					</li>
					<li class="nav-item">
						<a class="nav-link text-nowrap" href="https://www.linkedin.com/in/ariel-yssou-oliveira-f-2a07a5b5/" target="_blank"><i class="fab fa-linkedin fa-lg"></i></a>
					</li>
				</ul>
			</div>
		</nav>
		<!-- End of navigation bar -->
		
		<div class="container post_body">
			<div class="row post_struct">
				<div class="col-ld-12">
					<div class="post_cover">
						<div class="blog_title">
							TITLE_TAG
						</div>
					</div>

					<p>A natureza está repleta de eventos aleatórios, que geram padrões igualmente lindos e intrigantes.</p>
					<img src="collage.jpg" alt="Nature Random Paterns", class="img_format">
					<p>Porém se compararmos esses padrões com os que podemos gerar com geradores de números pseudo-aleatórios vemos que há diferenças fundamentais. Resta a questão de como podemos aproximar esses padrões com os "reais". </p>

				<div class="row">
					<div class="col">
						<img src="random_noise.jpg" alt="Random Noise" class='img_format'>
					</div>
					<div class="col">
						<img src="dry_paint.jpeg" alt="Dry paint" class='img_format'>
					</div>
				</div>


				<p>Esse desafio foi enfrentado por Ken Perlin nos anos 80, onde ele teve que desenvolver um algoritimo para gerar texturas realistas para o filme "Tron", que veio a ganhar o oscar daquele ano. Para o algorítimo ele começou gerando números alatórios em um intervalo e então interpolando os valores. Com esse método obtemos uma função de ruído, que transiciona continuamente entre valores aleatórios. Para gerar ruídos em 2D ou 3D precismos interpolar \(2^d\) pontos aleatórios, onde \(d\) é a dimenção do espaço. Com o que discutimos voce já poderia escrever o sua propria função de ruído (o quão complexa ou simples o quanto você quiser).</p>

				<div class="row">
					<div class="col">
						<img src="neg_plot.png" alt="Random Noise" class='img_format'>
					</div>
					<div class="col">
						<img src="tron.jpg" alt="Dry paint" class='img_format'>
					</div>
				</div>



					<p>Academicamente ruídos aleatórios são estudados extensivamente e geram comportamentos físicos exóticos como fases de Griffts e paragnetismo quântico aleatório, mas também podemos usa-los em simulações simples para imitar o comportamento do vento ou de uma correnteza, por exemplo.</p>
					<p>Como exemplo vamos simular um sistema de partículas não interagentes que estão expostas a um campo de forças, dado através da função de ruído. Para gerar um campo vetorial em duas dimensões precisamos associar a cada ponto um vetor. Por simplicidade eu fixei a magnitude de todos vetores em \(1\) e só sorteei a inclinação com a função de ruído, mas sinta-se livre para fazer uma implementação mais complexa.</p>
					<p>Começamos implementado o objeto de uma partícula, cuja aceleração a cada momento dado será dada pela função <code>noise()</code>. Para não ter que dividir a força pela massa toda vez que formos atualizar a aceleração da partícula, vamos assumir que $m=1$ por simplificação. Mostrando somente a trajetória de cada partícula (salvando a posição antiga de cada uma e a cada iteração traçando uma reta entre a posição antiga e a nova) obtemos o seguinte resultado. Para mais detalhes na implementação sugiro o excelente vídeo do Daniel Shiffman do codingtrain, cujo canal eu recomento fortemente. </p>
					<p>Clique na simulação para fazer ela rodar ou pausar.</p>
					<div id="perlin_field"></div>
					<p>Com essa ideia eu aproveitei pra explorar mais algumas ideias, como somar um potencial central (simulação à esquerda) ou só mostrar regiões onde o ruído é superior a um valor de base. Clique nas simulações para rodar ou pausar elas. Eu errei em algum lugar do html então em alguns brownsers precisa clicar duas vezes, então se não for de primeira já sabe.</p>

					<div class="row">
						<div class="col">
							<div id="perlin_alt"></div>
						</div>
						<div class="col">
							<div id="ink"></div>
						</div>
					</div>


					<!--
					<div id="perlin_alt"></div>
					<div id="ink"></div>
					-->
					<p>Espero que tenha gostado! O código fonte inteiro para essa última simulação. Se quiser ler mais sobre esse assunto recomendo fortemente o "book of shaders".</p>

					
					Code:
					<pre data-src="sketch.js" class="line-numbers my_code"></pre>

				</div>
			</div>
		</div>

		<hr/>
		<script src="../../js/script.js"> </script><!--TARGET-->
		<script src="../../js/prism.js"> </script><!--TARGET-->
		<!-- Bootstrap + JQuery -->
		<script src="https://code.jquery.com/jquery-3.3.1.slim.min.js" integrity="sha384-q8i/X+965DzO0rT7abK41JStQIAqVgRVzpbzo5smXKp4YfRvH+8abtTE1Pi6jizo" crossorigin="anonymous"></script>
		<script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" crossorigin="anonymous"></script>
		<script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" crossorigin="anonymous"></script>

		<script src="https://kit.fontawesome.com/9ead9d8df4.js" crossorigin="anonymous"></script>


	</body>
</html>
